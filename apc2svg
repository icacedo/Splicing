#!/usr/bin/env python3

import argparse
import subprocess
import sys

import grimoire.genome
import grimoire.feature

#######
# CLI #
#######

parser = argparse.ArgumentParser(
	description='gff organizer of sorts')
parser.add_argument('apc', type=str, metavar='<apc>',
	help='path to apc directory of fasta and gff')
parser.add_argument('tsv', type=str, metavar='<apc.tsv>',
	help='path to apc.tsv file')
parser.add_argument('mdir', type=str, metavar='<mdir>',
	help='path to model dir')
parser.add_argument('--program', type=str, metavar='<str>',
	default='isoformer', required=False,
	help='isoform generation program [%(default)s]')
arg = parser.parse_args()

#############
# Functions #
#############

def isoforms(dna, prog, fasta, mdir, don, acc, emm, imm, elen, ilen, icost):
	stuff = subprocess.run([prog, fasta,
		'--dpwm', f'{mdir}/donor.pwm',    '--wdpwm', don,
		'--apwm', f'{mdir}/acceptor.pwm', '--wapwm', acc,
		'--emm',  f'{mdir}/exon.mm',      '--wemm',  emm,
		'--imm',  f'{mdir}/intron.mm',    '--wimm',  imm,
		'--elen', f'{mdir}/exon.len',     '--welen', elen,
		'--ilen', f'{mdir}/intron.len',   '--wilen', ilen,
		'--icost', str(icost)], capture_output=True, text=True).stdout

class Drawing():

	def __init__(self, dna, title="Untitled", width=1000):

		self.title = title
		self.width = width
		self.scale = len(dna.seq) / width
		self.tracks = []
		self.

	def add_body(self, stuff):
		pass


	def add_features(self, f):
		pass # all features must be of the same type

	def add_transcript(self, tx):
		self.body.append(1)

	def plot(self, size=10):
		xmlns = 'xmlns="http://www.w3.org/2000/svg"'
		height = (len(self.body) + 2) * size
		vbox = f'viewBox="0 0 {self.width} {height}"'
		print(f'<svg {vbox} {xmlns}>')
		print('<style>')
		print('  .red { fill: red; }')
		print('  .blk { fill: black; }')
		print('</style>')
		print(f'<text x="10" y="10" class="blk">{self.title}</text>')


		#print(f'<rect fill="#f0f" stroke="#000" x="0" y="0" width="90%" height="90%"/>')
		#print(f'<rect fill="#ff0" stroke="#000" x="20" y="60" width="40" height="50"/>')
		print('</svg>')

########
# Main #
########

with open(arg.tsv) as fp:
	header = fp.readline()
	for line in fp.readlines():
		seq, don, acc, emm, imm, elen, ilen, icost, fit = line.split()
		genome = grimoire.genome.Reader(
			fasta=f'{arg.apc}/{seq}.fa',
			gff=f'{arg.apc}/{seq}.gff3')
		chrom = next(genome)
		gene = chrom.ftable.build_genes()[0]
		tx = gene.transcripts()[0]
		img = Drawing(chrom, title=f'{chrom.name} {chrom.desc}', width=600)
		img.add_transcript(tx)
		img.plot()

		sys.exit()


"""

img.add_track(...) header
img.add_track(...) body (canonical transcript)
img.add_track(...) body (predicitions)
img.add_track(...) RNA-seq splice
img.add_track(...) footer
img.add_decor(...) anywhere








"""
