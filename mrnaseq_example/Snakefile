# -62 is N2, wildtype
# -82 is r910, smg-1 mutant
# data from Muir et. al. 2018
# GEO accession number GSE100929
# go to SRA Run Selector

SAMPLES=[
	"SRR5811862.subset"
]
'''
rule all:
	input:
		expand("HTS_testing/{sample}.htsStats.json", sample=SAMPLES),
		expand("HTS_testing/{sample}.htstream_SE.fastq.gz", sample=SAMPLES),	
		directory("star_counts/")
		
rule stream_hts:
	input:
		mrna = "data/subset/{sample}.fastq.gz",
		rrna = "references/celegans_rrna.fasta"
	output:
		multiext("HTS_testing/{sample}", ".htsStats.json", \
		".htstream_SE.fastq.gz")
	shell:
		"hts_Stats -L HTS_testing/{wildcards.sample}.htsStats.json "
		"-N 'initial stats' -U {input.mrna} | "
		# phix reads are screened out by default
		# uknown phix sequence
		"hts_SeqScreener -A HTS_testing/{wildcards.sample}.htsStats.json "
		"-N 'screen phix' | "
		"hts_SeqScreener -A HTS_testing/{wildcards.sample}.htsStats.json "
		"-N 'count the number of rRNA reads' -r -s {input.rrna} | "
		# UCD bioinformatics core recommends to NEVER remove PCR duplicates
		# on single-end reads, not sure why though
		"hts_SuperDeduper -A HTS_testing/{wildcards.sample}.htsStats.json "
		"-N 'remove PCR duplicates' | "
		# unknown adapter sequence, likely already removed
		# htstream provides a default adapter sequence (not applicable here)
		"hts_AdapterTrimmer -A HTS_testing/{wildcards.sample}.htsStats.json "
		"-N 'trim adapters' | "
		"hts_PolyATTrim -A HTS_testing/{wildcards.sample}.htsStats.json "
		"-N 'trim adapters' | "
		"hts_NTrimmer -A HTS_testing/{wildcards.sample}.htsStats.json "
		"-N 'remove any remaining 'N' characters' | "
		"hts_QWindowTrim -A HTS_testing/{wildcards.sample}.htsStats.json "
		"-N 'quality trim the ends of reads' | "
		"hts_LengthFilter -A HTS_testing/{wildcards.sample}.htsStats.json "
		"-N 'remove reads < 50 bp' -n -m 50 | "
		"hts_Stats -A HTS_testing/{wildcards.sample}.htsStats.json "
		"-f HTS_testing/{wildcards.sample}.htstream > HTS_testing/out.tab"
		
rule gff_to_gtf:
	input:
		"references/1pct_elegans.gff3"
	output:
		"references/1pct_elegans.gtf2"
	shell:
		"gffread {input} -T -o {output}"

rule index_genome:
	input:
		fasta = "references/1pct_elegans.fa",
		gtf2 = "references/1pct_elegans.gtf2"
	output:
		# if directory is pre-existing, files will not be generated
		directory("star_index/")	
	shell:
		# need to scale down --genomeSAindexNbases for small genomes
		"STAR --runThreadN 1 --runMode genomeGenerate --genomeDir {output} "
		"--genomeFastaFiles {input.fasta} --sjdbGTFfile {input.gtf2} "
		"--sjdbOverhang 100"
		
# ian says don't ever soft or hard clip reads
# throwing away information
'''

rule all:
	input:
		expand("star_counts/{sample}.htstream_SE.Aligned.sortedByCoord.out.bam", \
		sample=SAMPLES), 
		expand("star_counts/{sample}.htstream_SE.Log.progress.out", \
		sample=SAMPLES), 
		expand("star_counts/{sample}.htstream_SE.Log.final.out", \
		sample=SAMPLES),
		expand("star_counts/{sample}.htstream_SE.ReadsPerGene.out.tab", \
		sample=SAMPLES), 
		expand("star_counts/{sample}.htstream_SE.Log.out", sample=SAMPLES),
		expand("star_counts/{sample}.htstream_SE.SJ.out.tab", sample=SAMPLES)

rule count_reads:
	input:
		gdir = "star_index/",
		reads = "HTS_testing/{sample}.htstream_SE.fastq.gz"
	output:
		multiext("star_counts/{sample}.htstream_SE.", \
		"Aligned.sortedByCoord.out.bam", "Log.progress.out", "Log.final.out", \
		"ReadsPerGene.out.tab", "Log.out", "SJ.out.tab")
	shell:
		"STAR --runThreadN 1 --genomeDir {input.gdir} --outSAMtype "
		"BAM SortedByCoordinate --quantMode GeneCounts --outFileNamePrefix "
		"star_counts/{wildcards.sample}.htstream_SE. --readFilesCommand zcat "
		"--readFilesIn {input.reads}" 

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
