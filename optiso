#!/usr/bin/env python3

import json
import os
import random

import isoform

def set_fitness(guy, cfg, truth):

	base = [f'./geniso']
	for opt, val in cfg['cli'].items():
		base.append(f'{opt} {val}')
	for opt, val in guy['genotype'].items():
		base.append(f'{opt} {val}')
	
	sum = 0
	for d in cfg['data']:
		cmd = [' '.join(base)]
		cmd.append(d['fasta'])
		if cfg['gff_introns']: cmd.append(f'--introns {d["gff"]}')
		cmd.append(f'> tmp.gff')
		cli = ' '.join(cmd)
		os.system(cli)
		found = isoform.get_introns('tmp.gff')
		dist, details = isoform.expdiff(found, truth[d['name']])
		sum += dist

	guy['fitness'] = dist
	
def random_guy():
	guy = {
		'genotype': {
			'--wdpwm': random.random(),
			'--wapwm': random.random(),
			'--wemm':  random.random(),
			'--wimm':  random.random(),
			'--welen': random.random(),
			'--wilen': random.random(),
			'--icost': random.randint(0, 9),
		},
		'fitness': None
	}
	return guy

def read_cfg(filename):
	cfg = None
	with open(filename) as fp:
		s = fp.read()
		cfg = json.loads(s)	
	return cfg

# Initialize

cfg = read_cfg('config.json')

introns = {}
for d in cfg['data']:
	introns[d['name']] = isoform.get_introns(d['gff'])

psize = 20
pop = []
for i in range(psize):
	guy = random_guy()
	set_fitness(guy, cfg, introns)
	pop.append(guy)

# Evolve population


# Final report
