---
root.dir: /home/carl/Code/isoforms/apc/
---

```{r}
apc_dir <- "/home/carl/Code/splicing/Ranalysis/sub/"
# full data
apc_dir <- "/home/carl/Code/isoforms/apc/"
g_files <- list.files(apc_dir, pattern = ".gff3")
g_paths <- sapply(seq_along(g_files), function(x) {
  paste(apc_dir, g_files[x], sep = "")
})
rm(g_files)
```

```{r}
library(dplyr)
library(tidyr)
```

```{r}
gffs_df <- lapply(g_paths, function(x) {
  read.table(x, header = FALSE, sep = "\t")
}) %>%
  do.call('rbind',.) 

colnames(gffs_df) <- c("seqid", "source", "type", "start", "end", "score", 
                       "strand", "phase", "attributes")
```

```{r}
tmp1 <- gffs_df
tmp2 <- tmp1 %>%
  select(seqid, start, end) %>% # need ids to create unique introns
  unite(., "start_end", sep = ",")

gdata <- mutate(tmp1, tmp2)
rm(tmp1, tmp2)
```

Use case_when() in mutate() to add a new column to a df based on a comparison between other columns in the df.

```{r}
gdata <- gdata %>% 
  mutate(wb_int = case_when(
    source == "WormBase" & type == "intron" ~ TRUE,
                            TRUE ~ FALSE))
```

Create a vector with all introns that are wormbase introns. Which gene each intron belongs to is also included.

```{r}
# subset using logicals T/F
wb_ints <- gdata$start_end[gdata$wb_int]
```

```{r}
# labels all the top scoring isoforms
gdata <- gdata %>% 
  mutate(int_score = case_when(
    start_end %in% wb_ints & source == "RNASeq_splice" ~ TRUE,
    TRUE ~ FALSE
  ))
```

Very useful: https://dplyr.tidyverse.org/articles/rowwise.html Can do operations on a per row basis install of all columns

```{r}
# don't forget comma; ,] means all columns
# df[rows, columns]
# automatically gets the true columns
top_ints <- gdata[gdata$int_score,] 

get_len <- function(beg, end) {
  return(end - beg + 1)
}

top_ints <- top_ints %>% 
  rowwise() %>% 
  mutate(length = get_len(start, end))
```
```{r}

```

```{r}
hist(top_ints$length)
```

```{r}

```





